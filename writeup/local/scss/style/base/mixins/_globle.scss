//FONT SIZE
@mixin fontsize($pxval) {
    font-size: $pxval + px;

    //Fallback in px
    font-size: rem($pxval);
}

@mixin font-size($pxval: 16, $line: 1.5) {
    font-size: $pxval + px;
    line-height: $line;
    font-size: rem($pxval);

    //line-height: rem($pxval)
}

// CLEAR AFTER MIXIN
// @include clear;
@mixin clear {
    &:after {
        content: "";
        display: table;
        clear: both;
    }
}

// ANCHOR HOVER & FOCUS
@mixin anchor($decoration: none, $outline: none) {
    &:focus, &:hover {
        text-decoration: none;
        outline: none;
    }
}

// OR SEPRATOR
@mixin or_seprator($wtd: 100%, $dis: block, $mrg: 30px auto, $brd-btm: 1px solid lighten(#000, 15%), $ht: 1px) {
    width: $wtd;
    display: $dis;
    margin: $mrg;
    border-bottom: $brd-btm;
    height: $ht;

    @include pos(rel, null);

    text-align: center;

    span {
        @include square(35px);

        @include fontsize(14);

        line-height: 35px;
        display: block;

        @include pos(ab, 0 null null 50%);

        @include translate(-50%, -50%);

        background-color: #fff;

        @include radius(50%);
    }
}

// Opacity Mixin
// @include opacity(0);
@mixin opacity($value) {
    $IEValue: $value * 100;

    opacity: $value;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=" + $IEValue + ")";
    filter: alpha(opacity = $IEValue);
}

// FONT WEIGHT MIXIN
// @include font-weight(thin);
@mixin font-weight($weight) {
    $weights: ( onormal: 100, osbold: 200 , obold: 300);

    $output: $weight;

    @if map-has-key($weights, $weight) {
        $output: map-get($weights, $weight);
    }

    font-weight: $output;
}

//truncate
@mixin truncate($truncation-boundary) {
    max-width: $truncation-boundary;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}